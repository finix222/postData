{"version":3,"sources":["components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["post","props","react_default","a","createElement","className","FullPost","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Component","NewPost","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","title","content","author","_this2","type","onChange","event","setState","target","rows","Blog","axios","get","Post_Post","components_FullPost_FullPost","components_NewPost_NewPost","App","containers_Blog_Blog","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1003b1ed.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Post.css';\n\nconst post = (props) => (\n    <article className=\"Post\">\n        <h1>Title</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">Author</div>\n        </div>\n    </article>\n);\n\nexport default post;","import React, { Component } from 'react';\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n    render () {\n        let post = <p>Please select a Post!</p>;\n        post = (\n            <div className=\"FullPost\">\n                <h1>Title</h1>\n                <p>Content</p>\n                <div className=\"Edit\">\n                    <button className=\"Delete\">Delete</button>\n                </div>\n            </div>\n\n        );\n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\n\nimport './NewPost.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max'\n    }\n\n    render () {\n        return (\n            <div className=\"NewPost\">\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\n                <label>Content</label>\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />\n                <label>Author</label>\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\n                    <option value=\"Max\">Max</option>\n                    <option value=\"Manu\">Manu</option>\n                </select>\n                <button>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Post from '../../components/Post/Post';\nimport FullPost from '../../components/FullPost/FullPost';\nimport NewPost from '../../components/NewPost/NewPost';\nimport './Blog.css';\n\nclass Blog extends Component {\n    componentDidMount() {\n        axios.get(\"https://jsonplaceholder.typicode.com/posts\")\n    }\n    render () {\n        return (\n            <div>\n                <section className=\"Posts\">\n                    <Post />\n                    <Post />\n                    <Post />\n                </section>\n                <section>\n                    <FullPost />\n                </section>\n                <section>\n                    <NewPost />\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from 'react';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Blog />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}